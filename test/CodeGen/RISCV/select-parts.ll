; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv32 -verify-machineinstrs < %s \
; RUN:   | FileCheck %s -check-prefix=RV32I
; RUN: llc -mtriple=riscv64 -verify-machineinstrs < %s \
; RUN:   | FileCheck %s -check-prefix=RV64I

; Check that selects of wide values don't introduce unnecessary control flow.
; We should get ISD::SELECT -> ISD::SELECT_PARTS -> RISCVISD::SELECT_CC_PARTS
; -> Select_CC_Parts pseudo instruction -> single branch per two parts.

define i64 @cmovcc64(i32 signext %a, i64 %b, i64 %c) nounwind {
; RV32I-LABEL: cmovcc64:
; RV32I:       # %bb.0: # %entry
; RV32I-NEXT:    addi a5, zero, 123
; RV32I-NEXT:    beq a0, a5, .LBB0_2
; RV32I-NEXT:  # %bb.1: # %entry
; RV32I-NEXT:    mv a2, a4
; RV32I-NEXT:    mv a1, a3
; RV32I-NEXT:  .LBB0_2: # %entry
; RV32I-NEXT:    mv a0, a1
; RV32I-NEXT:    mv a1, a2
; RV32I-NEXT:    ret
;
; RV64I-LABEL: cmovcc64:
; RV64I:       # %bb.0: # %entry
; RV64I-NEXT:    addi a3, zero, 123
; RV64I-NEXT:    beq a0, a3, .LBB0_2
; RV64I-NEXT:  # %bb.1: # %entry
; RV64I-NEXT:    mv a1, a2
; RV64I-NEXT:  .LBB0_2: # %entry
; RV64I-NEXT:    mv a0, a1
; RV64I-NEXT:    ret
entry:
  %cmp = icmp eq i32 %a, 123
  %cond = select i1 %cmp, i64 %b, i64 %c
  ret i64 %cond
}

define i128 @cmovcc128(i64 signext %a, i128 %b, i128 %c) nounwind {
; RV32I-LABEL: cmovcc128:
; RV32I:       # %bb.0: # %entry
; RV32I-NEXT:    xori a1, a1, 123
; RV32I-NEXT:    or a5, a1, a2
; RV32I-NEXT:    beqz a5, .LBB1_3
; RV32I-NEXT:  # %bb.1: # %entry
; RV32I-NEXT:    lw a1, 4(a4)
; RV32I-NEXT:    lw a2, 0(a4)
; RV32I-NEXT:    bnez a5, .LBB1_4
; RV32I-NEXT:  .LBB1_2:
; RV32I-NEXT:    lw a5, 12(a3)
; RV32I-NEXT:    lw a3, 8(a3)
; RV32I-NEXT:    j .LBB1_5
; RV32I-NEXT:  .LBB1_3:
; RV32I-NEXT:    lw a1, 4(a3)
; RV32I-NEXT:    lw a2, 0(a3)
; RV32I-NEXT:    beqz a5, .LBB1_2
; RV32I-NEXT:  .LBB1_4: # %entry
; RV32I-NEXT:    lw a5, 12(a4)
; RV32I-NEXT:    lw a3, 8(a4)
; RV32I-NEXT:  .LBB1_5: # %entry
; RV32I-NEXT:    sw a5, 12(a0)
; RV32I-NEXT:    sw a3, 8(a0)
; RV32I-NEXT:    sw a1, 4(a0)
; RV32I-NEXT:    sw a2, 0(a0)
; RV32I-NEXT:    ret
;
; RV64I-LABEL: cmovcc128:
; RV64I:       # %bb.0: # %entry
; RV64I-NEXT:    addi a5, zero, 123
; RV64I-NEXT:    beq a0, a5, .LBB1_2
; RV64I-NEXT:  # %bb.1: # %entry
; RV64I-NEXT:    mv a2, a4
; RV64I-NEXT:    mv a1, a3
; RV64I-NEXT:  .LBB1_2: # %entry
; RV64I-NEXT:    mv a0, a1
; RV64I-NEXT:    mv a1, a2
; RV64I-NEXT:    ret
entry:
  %cmp = icmp eq i64 %a, 123
  %cond = select i1 %cmp, i128 %b, i128 %c
  ret i128 %cond
}

define i64 @cmov64(i1 %a, i64 %b, i64 %c) nounwind {
; RV32I-LABEL: cmov64:
; RV32I:       # %bb.0: # %entry
; RV32I-NEXT:    bnez a0, .LBB2_2
; RV32I-NEXT:  # %bb.1: # %entry
; RV32I-NEXT:    mv a2, a4
; RV32I-NEXT:    mv a1, a3
; RV32I-NEXT:  .LBB2_2: # %entry
; RV32I-NEXT:    mv a0, a1
; RV32I-NEXT:    mv a1, a2
; RV32I-NEXT:    ret
;
; RV64I-LABEL: cmov64:
; RV64I:       # %bb.0: # %entry
; RV64I-NEXT:    andi a0, a0, 1
; RV64I-NEXT:    bnez a0, .LBB2_2
; RV64I-NEXT:  # %bb.1: # %entry
; RV64I-NEXT:    mv a1, a2
; RV64I-NEXT:  .LBB2_2: # %entry
; RV64I-NEXT:    mv a0, a1
; RV64I-NEXT:    ret
entry:
  %cond = select i1 %a, i64 %b, i64 %c
  ret i64 %cond
}

define i128 @cmov128(i1 %a, i128 %b, i128 %c) nounwind {
; RV32I-LABEL: cmov128:
; RV32I:       # %bb.0: # %entry
; RV32I-NEXT:    bnez a1, .LBB3_3
; RV32I-NEXT:  # %bb.1: # %entry
; RV32I-NEXT:    lw a4, 4(a3)
; RV32I-NEXT:    lw a5, 0(a3)
; RV32I-NEXT:    beqz a1, .LBB3_4
; RV32I-NEXT:  .LBB3_2:
; RV32I-NEXT:    lw a1, 12(a2)
; RV32I-NEXT:    lw a2, 8(a2)
; RV32I-NEXT:    j .LBB3_5
; RV32I-NEXT:  .LBB3_3:
; RV32I-NEXT:    lw a4, 4(a2)
; RV32I-NEXT:    lw a5, 0(a2)
; RV32I-NEXT:    bnez a1, .LBB3_2
; RV32I-NEXT:  .LBB3_4: # %entry
; RV32I-NEXT:    lw a1, 12(a3)
; RV32I-NEXT:    lw a2, 8(a3)
; RV32I-NEXT:  .LBB3_5: # %entry
; RV32I-NEXT:    sw a1, 12(a0)
; RV32I-NEXT:    sw a2, 8(a0)
; RV32I-NEXT:    sw a4, 4(a0)
; RV32I-NEXT:    sw a5, 0(a0)
; RV32I-NEXT:    ret
;
; RV64I-LABEL: cmov128:
; RV64I:       # %bb.0: # %entry
; RV64I-NEXT:    bnez a0, .LBB3_2
; RV64I-NEXT:  # %bb.1: # %entry
; RV64I-NEXT:    mv a2, a4
; RV64I-NEXT:    mv a1, a3
; RV64I-NEXT:  .LBB3_2: # %entry
; RV64I-NEXT:    mv a0, a1
; RV64I-NEXT:    mv a1, a2
; RV64I-NEXT:    ret
entry:
  %cond = select i1 %a, i128 %b, i128 %c
  ret i128 %cond
}
